import { Telegraf, session, Scenes, Markup } from 'telegraf';
import { storage } from '../storage';
import { generateToken, verifyToken } from '../utils/auth';
import bcrypt from 'bcrypt';
import * as schema from '@shared/schema';
import { db } from '../db';
import { eq } from 'drizzle-orm';

// Type for our session data
interface BotSessionData extends Scenes.SceneSession {
  userId?: number;
  role?: string;
  token?: string;
  loginStep?: 'username' | 'password';
  registrationStep?: 'role' | 'fullName' | 'email' | 'username' | 'password' | 'confirmPassword';
  registrationData?: {
    username?: string;
    password?: string;
    confirmPassword?: string;
    role?: 'teacher' | 'student' | 'parent' | 'center';
    fullName?: string;
    email?: string;
  };
  tempLoginData?: {
    username?: string;
  };
  testAttempt?: {
    testId?: number;
    currentQuestionIndex?: number;
    answers?: { questionId: number, answer: string }[];
  };
}

// Create custom context type
interface BotContext extends Scenes.SceneContext {
  session: BotSessionData;
}

// Check for Telegram bot token
if (!process.env.TELEGRAM_BOT_TOKEN) {
  console.error('TELEGRAM_BOT_TOKEN environment variable is not set');
  process.exit(1);
}

// Initialize the bot
const bot = new Telegraf<BotContext>(process.env.TELEGRAM_BOT_TOKEN);

// Use session middleware
bot.use(session());

// Initialize session data
bot.use((ctx, next) => {
  if (!ctx.session) {
    ctx.session = {};
  }
  return next();
});

// Main message handler for login and registration flows
bot.on('text', async (ctx, next) => {
  const messageText = ctx.message.text;
  
  // Handle login flow
  if (ctx.session.loginStep) {
    if (ctx.session.loginStep === 'username') {
      ctx.session.tempLoginData = { username: messageText };
      ctx.session.loginStep = 'password';
      await ctx.reply('üîê Parolingizni kiriting:');
      return;
    }
    
    if (ctx.session.loginStep === 'password') {
      try {
        const username = ctx.session.tempLoginData?.username;
        if (!username) {
          await ctx.reply('‚ùå Xatolik yuz berdi. Qaytadan urinib ko\'ring.');
          ctx.session.loginStep = undefined;
          ctx.session.tempLoginData = undefined;
          return;
        }
        
        const user = await storage.getUserByUsername(username);
        
        if (!user) {
          await ctx.reply('‚ùå Bunday foydalanuvchi topilmadi. Qaytadan urinib ko\'ring.');
          ctx.session.loginStep = undefined;
          ctx.session.tempLoginData = undefined;
          return;
        }
        
        const isPasswordValid = await bcrypt.compare(messageText, user.password);
        
        if (!isPasswordValid) {
          await ctx.reply('‚ùå Noto\'g\'ri parol. Qaytadan urinib ko\'ring.');
          ctx.session.loginStep = undefined;
          ctx.session.tempLoginData = undefined;
          return;
        }
        
        // Login successful
        const token = generateToken(user.id, user.role);
        ctx.session.userId = user.id;
        ctx.session.role = user.role;
        ctx.session.token = token;
        ctx.session.loginStep = undefined;
        ctx.session.tempLoginData = undefined;
        
        await ctx.reply(
          `‚úÖ Xush kelibsiz, ${user.fullName}!\n\n` +
          `üéØ Siz ${getRoleNameInUzbek(user.role)} sifatida tizimga kirdingiz.\n\n` +
          'Quyidagi funksiyalardan foydalanishingiz mumkin:',
          Markup.keyboard(getKeyboardByRole(user.role)).resize()
        );
      } catch (error) {
        console.error('Login error:', error);
        await ctx.reply('‚ùå Tizimga kirishda xatolik yuz berdi. Iltimos, qaytadan urinib ko\'ring.');
        ctx.session.loginStep = undefined;
        ctx.session.tempLoginData = undefined;
      }
      return;
    }
  }
  
  // Handle registration flow
  if (ctx.session.registrationStep) {
    if (ctx.session.registrationStep === 'fullName') {
      if (!ctx.session.registrationData) ctx.session.registrationData = {};
      ctx.session.registrationData.fullName = messageText;
      ctx.session.registrationStep = 'email';
      await ctx.reply('üìß Email manzilingizni kiriting:');
      return;
    }
    
    if (ctx.session.registrationStep === 'email') {
      if (!ctx.session.registrationData) ctx.session.registrationData = {};
      
      // Simple email validation
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(messageText)) {
        await ctx.reply('‚ùå Noto\'g\'ri email format. Qaytadan kiriting:');
        return;
      }
      
      ctx.session.registrationData.email = messageText;
      ctx.session.registrationStep = 'username';
      await ctx.reply('üë§ Foydalanuvchi nomini kiriting:');
      return;
    }
    
    if (ctx.session.registrationStep === 'username') {
      if (!ctx.session.registrationData) ctx.session.registrationData = {};
      
      // Check if username already exists
      try {
        const existingUser = await storage.getUserByUsername(messageText);
        if (existingUser) {
          await ctx.reply('‚ùå Bu foydalanuvchi nomi allaqachon mavjud. Boshqa nom kiriting:');
          return;
        }
        
        ctx.session.registrationData.username = messageText;
        ctx.session.registrationStep = 'password';
        await ctx.reply('üîê Parol yarating (kamida 6 ta belgi):');
        return;
      } catch (error) {
        console.error('Username check error:', error);
        await ctx.reply('‚ùå Xatolik yuz berdi. Qaytadan urinib ko\'ring.');
        return;
      }
    }
    
    if (ctx.session.registrationStep === 'password') {
      if (!ctx.session.registrationData) ctx.session.registrationData = {};
      
      if (messageText.length < 6) {
        await ctx.reply('‚ùå Parol kamida 6 ta belgidan iborat bo\'lishi kerak. Qaytadan kiriting:');
        return;
      }
      
      ctx.session.registrationData.password = messageText;
      ctx.session.registrationStep = 'confirmPassword';
      await ctx.reply('üîê Parolni tasdiqlang:');
      return;
    }
    
    if (ctx.session.registrationStep === 'confirmPassword') {
      if (!ctx.session.registrationData) ctx.session.registrationData = {};
      
      if (messageText !== ctx.session.registrationData.password) {
        await ctx.reply('‚ùå Parollar mos kelmadi. Qaytadan tasdiqlang:');
        return;
      }
      
      // Registration complete
      try {
        const hashedPassword = await bcrypt.hash(ctx.session.registrationData.password, 10);
        
        const newUser = await storage.createUser({
          username: ctx.session.registrationData.username!,
          password: hashedPassword,
          email: ctx.session.registrationData.email!,
          role: ctx.session.registrationData.role!,
          fullName: ctx.session.registrationData.fullName!
        });
        
        // Auto login
        const token = generateToken(newUser.id, newUser.role);
        ctx.session.userId = newUser.id;
        ctx.session.role = newUser.role;
        ctx.session.token = token;
        ctx.session.registrationStep = undefined;
        ctx.session.registrationData = undefined;
        
        await ctx.reply(
          `üéâ Tabriklaymiz! Siz muvaffaqiyatli ro'yxatdan o'tdingiz.\n\n` +
          `üë§ Ism: ${newUser.fullName}\n` +
          `üéØ Rol: ${getRoleNameInUzbek(newUser.role)}\n\n` +
          'Quyidagi funksiyalardan foydalanishingiz mumkin:',
          Markup.keyboard(getKeyboardByRole(newUser.role)).resize()
        );
      } catch (error) {
        console.error('Registration error:', error);
        await ctx.reply('‚ùå Ro\'yxatdan o\'tishda xatolik yuz berdi. Iltimos, qaytadan urinib ko\'ring.');
        ctx.session.registrationStep = undefined;
        ctx.session.registrationData = undefined;
      }
      return;
    }
  }
  
  return next();
});

// Role selection handlers for registration
bot.hears(['üë®‚Äçüè´ O\'qituvchi', 'üë®‚Äçüéì O\'quvchi', 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Ota-ona', 'üè´ O\'quv markazi'], async (ctx) => {
  if (ctx.session.registrationStep === 'role') {
    const roleMap: Record<string, schema.User['role']> = {
      'üë®‚Äçüè´ O\'qituvchi': 'teacher',
      'üë®‚Äçüéì O\'quvchi': 'student',
      'üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Ota-ona': 'parent',
      'üè´ O\'quv markazi': 'center'
    };
    
    if (!ctx.session.registrationData) {
      ctx.session.registrationData = {};
    }
    
    const messageText = ctx.message && 'text' in ctx.message ? ctx.message.text : '';
    ctx.session.registrationData.role = roleMap[messageText];
    ctx.session.registrationStep = 'fullName';
    
    await ctx.reply(
      `‚úÖ Siz ${messageText} sifatida ro'yxatdan o'tyapsiz.\n\n` +
      'üë§ To\'liq ismingizni kiriting:'
    );
  }
});

// Back button handler
bot.hears('üîô Orqaga', async (ctx) => {
  ctx.session.loginStep = undefined;
  ctx.session.registrationStep = undefined;
  ctx.session.registrationData = undefined;
  ctx.session.tempLoginData = undefined;
  
  await ctx.reply(
    'Bosh menyuga qaytdingiz.\n\nQuyidagi amallardan birini tanlang:',
    Markup.keyboard([
      ['üîë Kirish', 'üìù Ro\'yxatdan o\'tish'],
      ['‚ÑπÔ∏è Ma\'lumot', 'üìä Statistika']
    ]).resize()
  );
});

// Command handlers

// Start command - entry point
bot.start(async (ctx) => {
  ctx.session = {}; // Reset session
  await ctx.reply(
    'Assalomu alaykum! O\'zbek Ta\'lim platformasiga xush kelibsiz! üéì\n\n' +
    'Iltimos, quyidagi amallardan birini tanlang:',
    Markup.keyboard([
      ['üîë Kirish', 'üìù Ro\'yxatdan o\'tish'],
      ['‚ÑπÔ∏è Ma\'lumot', 'üìä Statistika']
    ]).resize()
  );
});

// Help command
bot.help(async (ctx) => {
  await ctx.reply(
    'O\'zbek Ta\'lim platformasi buyruqlari:\n\n' +
    '/start - Botni qayta ishga tushirish\n' +
    '/login - Tizimga kirish\n' +
    '/register - Ro\'yxatdan o\'tish\n' +
    '/profile - Profilingizni ko\'rish\n' +
    '/lessons - Darslar ro\'yxati\n' +
    '/tests - Testlar ro\'yxati\n' +
    '/logout - Tizimdan chiqish'
  );
});

// Login handlers
bot.hears('üîë Kirish', async (ctx) => {
  await startLogin(ctx);
});

bot.command('login', async (ctx) => {
  await startLogin(ctx);
});

async function startLogin(ctx: BotContext) {
  ctx.session.loginStep = 'username';
  await ctx.reply(
    'üîë *Tizimga kirish*\n\nFoydalanuvchi nomingizni kiriting:',
    { parse_mode: 'Markdown' }
  );
}

// Registration handlers
bot.hears('üìù Ro\'yxatdan o\'tish', async (ctx) => {
  await startRegistration(ctx);
});

bot.command('register', async (ctx) => {
  await startRegistration(ctx);
});

async function startRegistration(ctx: BotContext) {
  ctx.session.registrationData = {};
  ctx.session.registrationStep = 'role';
  
  await ctx.reply(
    'üìù *Ro\'yxatdan o\'tish*\n\nO\'z rolingizni tanlang:',
    {
      parse_mode: 'Markdown',
      ...Markup.keyboard([
        ['üë®‚Äçüè´ O\'qituvchi', 'üë®‚Äçüéì O\'quvchi'],
        ['üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Ota-ona', 'üè´ O\'quv markazi'],
        ['üîô Orqaga']
      ]).resize()
    }
  );
}

// Profile command
bot.command('profile', async (ctx) => {
  if (!ctx.session.userId) {
    await ctx.reply(
      '‚ùå Siz tizimga kirmagansiz. Iltimos, avval tizimga kiring:',
      Markup.keyboard([
        ['üîë Kirish', 'üìù Ro\'yxatdan o\'tish'],
        ['‚ÑπÔ∏è Ma\'lumot', 'üìä Statistika']
      ]).resize()
    );
    return;
  }
  
  try {
    const user = await storage.getUser(ctx.session.userId);
    if (!user) {
      await ctx.reply('‚ùå Foydalanuvchi ma\'lumotlari topilmadi.');
      return;
    }
    
    let profileDetails = '';
    
    if (user.role === 'teacher') {
      const teacherProfile = await storage.getTeacherProfile(user.id);
      if (teacherProfile) {
        profileDetails = `üéì Fanlar: ${teacherProfile.subjects.join(', ')}\n`;
        if (teacherProfile.centerId) {
          profileDetails += `üè¢ O'quv markazi ID: ${teacherProfile.centerId}\n`;
        }
      }
    } else if (user.role === 'student') {
      const studentProfile = await storage.getStudentProfile(user.id);
      if (studentProfile) {
        profileDetails = `üéì Sinf: ${studentProfile.grade}\n` +
                         `üè´ Sinf: ${studentProfile.classroom}\n`;
        if (studentProfile.parentId) {
          profileDetails += `üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Ota-ona ID: ${studentProfile.parentId}\n`;
        }
        if (studentProfile.centerId) {
          profileDetails += `üè¢ O'quv markazi ID: ${studentProfile.centerId}\n`;
        }
      }
    }
    
    await ctx.reply(
      `üë§ *Profil ma'lumotlari*\n\n` +
      `üë§ Ism: ${user.fullName}\n` +
      `üìß Email: ${user.email}\n` +
      `üîë Foydalanuvchi nomi: ${user.username}\n` +
      `üß© Rol: ${getRoleNameInUzbek(user.role)}\n` +
      `üìÖ Ro'yxatdan o'tgan sana: ${new Date(user.createdAt).toLocaleDateString('uz-UZ')}\n\n` +
      profileDetails,
      { parse_mode: 'Markdown' }
    );
  } catch (error) {
    console.error('Error fetching profile:', error);
    await ctx.reply('‚ùå Profil ma\'lumotlarini olishda xatolik yuz berdi.');
  }
});

// Lessons commands
bot.command('lessons', async (ctx) => {
  if (!ctx.session.userId) {
    await ctx.reply('‚ùå Siz tizimga kirmagansiz. Iltimos, avval tizimga kiring.');
    return;
  }
  
  try {
    let lessons;
    const user = await storage.getUser(ctx.session.userId);
    
    if (!user) {
      await ctx.reply('‚ùå Foydalanuvchi ma\'lumotlari topilmadi.');
      return;
    }
    
    if (user.role === 'teacher') {
      lessons = await storage.getLessonsByTeacherId(user.id);
    } else if (user.role === 'student') {
      const profile = await storage.getStudentProfile(user.id);
      if (!profile) {
        await ctx.reply('‚ùå O\'quvchi profili topilmadi.');
        return;
      }
      lessons = await storage.getLessonsByGrade(profile.grade);
    } else {
      await ctx.reply('‚ùå Sizning rolingiz darslarni ko\'rishga ruxsat bermaydi.');
      return;
    }
    
    if (!lessons || lessons.length === 0) {
      await ctx.reply('‚ÑπÔ∏è Hozircha darslar mavjud emas.');
      return;
    }
    
    for (const lesson of lessons.slice(0, 5)) {
      // Get subject name if subjectId is available
      let subjectName = "Mavjud emas";
      if (lesson.subjectId) {
        const subject = await db.select().from(schema.subjects).where(eq(schema.subjects.id, lesson.subjectId)).limit(1);
        if (subject && subject.length > 0) {
          subjectName = subject[0].name;
        }
      }

      await ctx.reply(
        `üìö *${lesson.title}*\n\n` +
        `üìù *Tavsif*: ${lesson.description || 'Tavsif mavjud emas'}\n` +
        `üéì *Sinf*: ${lesson.grade}\n` +
        `üìö *Fan*: ${subjectName}\n` +
        `üìÖ *Yaratilgan sana*: ${new Date(lesson.createdAt).toLocaleDateString('uz-UZ')}`,
        { parse_mode: 'Markdown' }
      );
    }
    
    if (lessons.length > 5) {
      await ctx.reply(`... va yana ${lessons.length - 5} ta darslar. To'liq ro'yxatni ko'rish uchun veb-saytdan foydalaning.`);
    }
  } catch (error) {
    console.error('Error fetching lessons:', error);
    await ctx.reply('‚ùå Darslar ro\'yxatini olishda xatolik yuz berdi.');
  }
});

// Tests commands
bot.command('tests', async (ctx) => {
  if (!ctx.session.userId) {
    await ctx.reply('‚ùå Siz tizimga kirmagansiz. Iltimos, avval tizimga kiring.');
    return;
  }
  
  try {
    let tests;
    const user = await storage.getUser(ctx.session.userId);
    
    if (!user) {
      await ctx.reply('‚ùå Foydalanuvchi ma\'lumotlari topilmadi.');
      return;
    }
    
    if (user.role === 'teacher') {
      tests = await storage.getTestsByTeacherId(user.id);
    } else if (user.role === 'student') {
      const profile = await storage.getStudentProfile(user.id);
      if (!profile) {
        await ctx.reply('‚ùå O\'quvchi profili topilmadi.');
        return;
      }
      tests = await storage.getActiveTestsForStudent(profile.grade, profile.classroom);
    } else {
      await ctx.reply('‚ùå Sizning rolingiz testlarni ko\'rishga ruxsat bermaydi.');
      return;
    }
    
    if (!tests || tests.length === 0) {
      await ctx.reply('‚ÑπÔ∏è Hozircha testlar mavjud emas.');
      return;
    }
    
    // Create inline keyboard for tests
    const testButtons = await Promise.all(tests.slice(0, 10).map(async test => {
      // Get subject name if subjectId is available
      let subjectName = "Mavjud emas";
      if (test.subjectId) {
        const subject = await db.select().from(schema.subjects).where(eq(schema.subjects.id, test.subjectId)).limit(1);
        if (subject && subject.length > 0) {
          subjectName = subject[0].name;
        }
      }
      return [Markup.button.callback(`${test.title} (${subjectName})`, `view_test_${test.id}`)];
    }));
    
    await ctx.reply(
      'üìù *Mavjud testlar ro\'yxati*\n\n' +
      'Test haqida batafsil ma\'lumot olish uchun tugmani bosing:',
      {
        parse_mode: 'Markdown',
        ...Markup.inlineKeyboard(testButtons)
      }
    );
    
    if (tests.length > 10) {
      await ctx.reply(`... va yana ${tests.length - 10} ta testlar. To'liq ro'yxatni ko'rish uchun veb-saytdan foydalaning.`);
    }
  } catch (error) {
    console.error('Error fetching tests:', error);
    await ctx.reply('‚ùå Testlar ro\'yxatini olishda xatolik yuz berdi.');
  }
});

// Test view callback
bot.action(/view_test_(\d+)/, async (ctx) => {
  if (!ctx.session.userId) {
    await ctx.reply('‚ùå Siz tizimga kirmagansiz. Iltimos, avval tizimga kiring.');
    return;
  }
  
  const match = ctx.match[1];
  const testId = parseInt(match);
  
  try {
    const test = await storage.getTestById(testId);
    if (!test) {
      await ctx.reply('‚ùå Test topilmadi.');
      return;
    }
    
    // Get subject name if subjectId is available
    let subjectName = "Mavjud emas";
    if (test.subjectId) {
      const subject = await db.select().from(schema.subjects).where(eq(schema.subjects.id, test.subjectId)).limit(1);
      if (subject && subject.length > 0) {
        subjectName = subject[0].name;
      }
    }

    await ctx.reply(
      `üìù *${test.title}*\n\n` +
      `üìö *Fan*: ${subjectName}\n` +
      `üéì *Sinf*: ${test.grade}\n` +
      `üè´ *Sinf xonasi*: ${test.classroom || 'Barcha sinflar'}\n` +
      `‚è± *Davomiyligi*: ${test.duration} daqiqa\n` +
      `üìä *Holati*: ${getTestStatusInUzbek(test.status)}\n` +
      `üìÖ *Yaratilgan sana*: ${new Date(test.createdAt).toLocaleDateString('uz-UZ')}`,
      {
        parse_mode: 'Markdown',
        ...Markup.inlineKeyboard([
          [Markup.button.callback('Testni boshlash', `start_test_${test.id}`)]
        ])
      }
    );
  } catch (error) {
    console.error('Error fetching test details:', error);
    await ctx.reply('‚ùå Test ma\'lumotlarini olishda xatolik yuz berdi.');
  }
});

// Logout command
bot.command('logout', async (ctx) => {
  ctx.session = {};
  await ctx.reply(
    '‚úÖ Siz tizimdan muvaffaqiyatli chiqdingiz.\n\n' +
    'Iltimos, quyidagi amallardan birini tanlang:',
    Markup.keyboard([
      ['üîë Kirish', 'üìù Ro\'yxatdan o\'tish'],
      ['‚ÑπÔ∏è Ma\'lumot', 'üìä Statistika']
    ]).resize()
  );
});

// Information command
bot.hears('‚ÑπÔ∏è Ma\'lumot', async (ctx) => {
  await ctx.reply(
    '*O\'zbek Ta\'lim platformasi haqida*\n\n' +
    'O\'zbek Ta\'lim - bu o\'qituvchilar, o\'quvchilar, ota-onalar va o\'quv markazlari uchun yaratilgan ko\'p foydalanuvchili ta\'lim platformasi. ' +
    'Platformamiz orqali siz quyidagi imkoniyatlarga ega bo\'lasiz:\n\n' +
    'üë®‚Äçüè´ *O\'qituvchilar uchun*:\n' +
    '‚Ä¢ Darslar yaratish va boshqarish\n' +
    '‚Ä¢ Turli xil testlar tayyorlash\n' +
    '‚Ä¢ O\'quvchilar natijalarini kuzatish\n\n' +
    'üë®‚Äçüéì *O\'quvchilar uchun*:\n' +
    '‚Ä¢ Darslarni o\'rganish\n' +
    '‚Ä¢ Testlarni yechish\n' +
    '‚Ä¢ O\'z natijalarini kuzatish\n\n' +
    'üë®‚Äçüë©‚Äçüëß‚Äçüë¶ *Ota-onalar uchun*:\n' +
    '‚Ä¢ Farzandlarining o\'quv jarayonini kuzatish\n' +
    '‚Ä¢ O\'qituvchilar bilan aloqa\n\n' +
    'üè´ *O\'quv markazlari uchun*:\n' +
    '‚Ä¢ O\'quv dasturlarini boshqarish\n' +
    '‚Ä¢ O\'qituvchilar va o\'quvchilarni ro\'yxatga olish\n\n' +
    'Platformadan foydalanish uchun ro\'yxatdan o\'ting yoki tizimga kiring!',
    { parse_mode: 'Markdown' }
  );
});

// Statistics command
bot.hears('üìä Statistika', async (ctx) => {
  try {
    const teacherCount = (await storage.getUsersByRole('teacher')).length;
    const studentCount = (await storage.getUsersByRole('student')).length;
    const parentCount = (await storage.getUsersByRole('parent')).length;
    const centerCount = (await storage.getUsersByRole('center')).length;
    
    await ctx.reply(
      '*üìä Platforma statistikasi*\n\n' +
      `üë®‚Äçüè´ O'qituvchilar: ${teacherCount} ta\n` +
      `üë®‚Äçüéì O'quvchilar: ${studentCount} ta\n` +
      `üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Ota-onalar: ${parentCount} ta\n` +
      `üè´ O'quv markazlari: ${centerCount} ta\n\n` +
      'üìö O\'rganishga tayyormisiz? Hoziroq platformamizga qo\'shiling!',
      { parse_mode: 'Markdown' }
    );
  } catch (error) {
    console.error('Error fetching statistics:', error);
    await ctx.reply('‚ùå Statistika ma\'lumotlarini olishda xatolik yuz berdi.');
  }
});

// Handle unexpected errors
bot.catch((err, ctx) => {
  console.error(`Bot error for ${ctx.updateType}`, err);
  ctx.reply('‚ùå Xatolik yuz berdi. Iltimos, qaytadan urinib ko\'ring.');
});

// Helper functions
function getKeyboardByRole(role: string) {
  if (role === 'teacher') {
    return [
      ['üë§ Profil', 'üìö Darsliklar'],
      ['üìù Testlar', 'üë• O\'quvchilarim'],
      ['üìä Statistika', '‚öôÔ∏è Sozlamalar'],
      ['üîô Chiqish']
    ];
  } else if (role === 'student') {
    return [
      ['üë§ Profil', 'üìö Darsliklarim'],
      ['üìù Test ishlash', 'üìä Natijalarim'],
      ['üîç Qidiruv', 'üèÜ Raqobat'],
      ['‚öôÔ∏è Sozlamalar', 'üîô Chiqish']
    ];
  } else if (role === 'parent') {
    return [
      ['üë§ Profil', 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Farzandlarim'],
      ['üìä Statistika', 'üí≥ To\'lovlar'],
      ['üîç Qidiruv', '‚öôÔ∏è Sozlamalar'],
      ['üîô Chiqish']
    ];
  } else if (role === 'center') {
    return [
      ['üë§ Profil', 'üë®‚Äçüè´ O\'qituvchilar'],
      ['üë• O\'quvchilar', 'üìö Kurslar'],
      ['üìä Statistika', '‚öôÔ∏è Sozlamalar'],
      ['üîô Chiqish']
    ];
  }
  
  // Default keyboard
  return [
    ['üë§ Profil', 'üìö Darslar'],
    ['üìù Testlar', 'üìä Statistika'],
    ['üîô Chiqish']
  ];
}

function getRoleNameInUzbek(role: string): string {
  const roleMap: Record<string, string> = {
    'teacher': 'O\'qituvchi',
    'student': 'O\'quvchi',
    'parent': 'Ota-ona',
    'center': 'O\'quv markazi'
  };
  
  return roleMap[role] || role;
}

function getTestStatusInUzbek(status: string): string {
  const statusMap: Record<string, string> = {
    'draft': 'Qoralama',
    'active': 'Faol',
    'completed': 'Yakunlangan'
  };
  
  return statusMap[status] || status;
}

// Role-specific menu handlers

// Teacher menu handlers
bot.hears('üìö Darsliklar', async (ctx) => {
  if (!ctx.session.userId || ctx.session.role !== 'teacher') {
    await ctx.reply('‚ùå Bu funksiya faqat o\'qituvchilar uchun.');
    return;
  }
  
  await ctx.reply(
    'üìö *Darsliklar bo\'limi*\n\nQuyidagi amallardan birini tanlang:',
    {
      parse_mode: 'Markdown',
      ...Markup.keyboard([
        ['‚ûï Online darslik yaratish', '‚ûï Offline darslik yaratish'],
        ['üìñ Mavjud darsliklar', 'üìä Darslik statistikasi'],
        ['üîô Orqaga']
      ]).resize()
    }
  );
});

bot.hears('üìù Testlar', async (ctx) => {
  if (!ctx.session.userId) {
    await ctx.reply('‚ùå Tizimga kirmagansiz.');
    return;
  }
  
  if (ctx.session.role === 'teacher') {
    await ctx.reply(
      'üìù *Testlar bo\'limi*\n\nQuyidagi test turlaridan birini tanlang:',
      {
        parse_mode: 'Markdown',
        ...Markup.keyboard([
          ['üìù Oddiy test', 'üîì Ochiq test'],
          ['üéØ DTM test', 'üèÜ Sertifikat test'],
          ['‚è∞ Intizomli test', 'üìã Mavjud testlar'],
          ['üîô Orqaga']
        ]).resize()
      }
    );
  } else if (ctx.session.role === 'student') {
    await ctx.reply(
      'üìù *Test ishlash*\n\nQuyidagi amallardan birini tanlang:',
      {
        parse_mode: 'Markdown',
        ...Markup.keyboard([
          ['üî¢ Maxsus raqam orqali', 'üåê Ommaviy testlar'],
          ['üìã Mavjud testlar', 'üìä Test natijalari'],
          ['üîô Orqaga']
        ]).resize()
      }
    );
  }
});

bot.hears('üë• O\'quvchilarim', async (ctx) => {
  if (!ctx.session.userId || ctx.session.role !== 'teacher') {
    await ctx.reply('‚ùå Bu funksiya faqat o\'qituvchilar uchun.');
    return;
  }
  
  await ctx.reply(
    'üë• *O\'quvchilar bo\'limi*\n\nQuyidagi amallardan birini tanlang:',
    {
      parse_mode: 'Markdown',
      ...Markup.keyboard([
        ['üë§ O\'quvchi qo\'shish', 'üìã Barcha o\'quvchilar'],
        ['üìä O\'quvchi statistikasi', 'üîê Login/Parol berish'],
        ['üîô Orqaga']
      ]).resize()
    }
  );
});

// Student menu handlers
bot.hears('üìö Darsliklarim', async (ctx) => {
  if (!ctx.session.userId || ctx.session.role !== 'student') {
    await ctx.reply('‚ùå Bu funksiya faqat o\'quvchilar uchun.');
    return;
  }
  
  await ctx.reply(
    'üìö *Darsliklarim*\n\nQuyidagi amallardan birini tanlang:',
    {
      parse_mode: 'Markdown',
      ...Markup.keyboard([
        ['üìñ Mavjud darsliklar', 'üìä O\'rganish statistikasi'],
        ['üîç Darslik qidirish', '‚≠ê Sevimli darsliklar'],
        ['üîô Orqaga']
      ]).resize()
    }
  );
});

bot.hears('üìù Test ishlash', async (ctx) => {
  if (!ctx.session.userId || ctx.session.role !== 'student') {
    await ctx.reply('‚ùå Bu funksiya faqat o\'quvchilar uchun.');
    return;
  }
  
  await ctx.reply(
    'üìù *Test ishlash*\n\nQuyidagi amallardan birini tanlang:',
    {
      parse_mode: 'Markdown',
      ...Markup.keyboard([
        ['üî¢ Maxsus raqam orqali', 'üåê Ommaviy testlar'],
        ['üìã Mavjud testlar', 'üìä Test natijalari'],
        ['üîô Orqaga']
      ]).resize()
    }
  );
});

bot.hears('üîç Qidiruv', async (ctx) => {
  if (!ctx.session.userId) {
    await ctx.reply('‚ùå Tizimga kirmagansiz.');
    return;
  }
  
  if (ctx.session.role === 'student') {
    await ctx.reply(
      'üîç *Qidiruv*\n\nNimani qidiryapsiz?',
      {
        parse_mode: 'Markdown',
        ...Markup.keyboard([
          ['üë®‚Äçüè´ O\'qituvchi qidirish', 'üìö Darslik qidirish'],
          ['üè´ O\'quv markaz qidirish', 'üë• Guruh qidirish'],
          ['üîô Orqaga']
        ]).resize()
      }
    );
  } else if (ctx.session.role === 'parent') {
    await ctx.reply(
      'üîç *Qidiruv*\n\nNimani qidiryapsiz?',
      {
        parse_mode: 'Markdown',
        ...Markup.keyboard([
          ['üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Farzand qidirish', 'üë®‚Äçüè´ O\'qituvchi qidirish'],
          ['üè´ O\'quv markaz qidirish', 'üîô Orqaga']
        ]).resize()
      }
    );
  }
});

// Parent menu handlers
bot.hears('üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Farzandlarim', async (ctx) => {
  if (!ctx.session.userId || ctx.session.role !== 'parent') {
    await ctx.reply('‚ùå Bu funksiya faqat ota-onalar uchun.');
    return;
  }
  
  await ctx.reply(
    'üë®‚Äçüë©‚Äçüëß‚Äçüë¶ *Farzandlarim*\n\nQuyidagi amallardan birini tanlang:',
    {
      parse_mode: 'Markdown',
      ...Markup.keyboard([
        ['üë§ Farzand qo\'shish', 'üìã Farzandlar ro\'yxati'],
        ['üìä Farzand statistikasi', 'üìù O\'qituvchiga xabar'],
        ['üîô Orqaga']
      ]).resize()
    }
  );
});

bot.hears('üí≥ To\'lovlar', async (ctx) => {
  if (!ctx.session.userId || ctx.session.role !== 'parent') {
    await ctx.reply('‚ùå Bu funksiya faqat ota-onalar uchun.');
    return;
  }
  
  await ctx.reply(
    'üí≥ *To\'lovlar*\n\nQuyidagi amallardan birini tanlang:',
    {
      parse_mode: 'Markdown',
      ...Markup.keyboard([
        ['üí∞ To\'lov qilish', 'üìã To\'lov tarixi'],
        ['üìä To\'lov statistikasi', 'üîî To\'lov eslatmalari'],
        ['üîô Orqaga']
      ]).resize()
    }
  );
});

// Common menu handlers
bot.hears('‚öôÔ∏è Sozlamalar', async (ctx) => {
  if (!ctx.session.userId) {
    await ctx.reply('‚ùå Tizimga kirmagansiz.');
    return;
  }
  
  let settingsMenu = [
    ['üîê Parolni o\'zgartirish', 'üë§ Profil tahrirlash'],
    ['üîî Bildirishnomalar', 'üåê Til sozlamalari']
  ];
  
  if (ctx.session.role === 'teacher' || ctx.session.role === 'student') {
    settingsMenu.push(['üóëÔ∏è Hisobni o\'chirish', 'üîô Orqaga']);
  } else {
    settingsMenu.push(['üîô Orqaga']);
  }
  
  await ctx.reply(
    '‚öôÔ∏è *Sozlamalar*\n\nQuyidagi amallardan birini tanlang:',
    {
      parse_mode: 'Markdown',
      ...Markup.keyboard(settingsMenu).resize()
    }
  );
});

// Back to main menu handler
bot.hears('üîô Orqaga', async (ctx) => {
  if (!ctx.session.userId) {
    // Not logged in, go to main menu
    ctx.session.loginStep = undefined;
    ctx.session.registrationStep = undefined;
    ctx.session.registrationData = undefined;
    ctx.session.tempLoginData = undefined;
    
    await ctx.reply(
      'Bosh menyuga qaytdingiz.\n\nQuyidagi amallardan birini tanlang:',
      Markup.keyboard([
        ['üîë Kirish', 'üìù Ro\'yxatdan o\'tish'],
        ['‚ÑπÔ∏è Ma\'lumot', 'üìä Statistika']
      ]).resize()
    );
  } else {
    // Logged in, go to role dashboard
    await ctx.reply(
      `Bosh sahifaga qaytdingiz.\n\nQuyidagi funksiyalardan foydalaning:`,
      Markup.keyboard(getKeyboardByRole(ctx.session.role!)).resize()
    );
  }
});

export { bot };